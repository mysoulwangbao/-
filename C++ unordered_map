成员函数：
=================迭代器========================= 
begin 　　返回指向容器起始位置的迭代器（iterator） 
end 　　   返回指向容器末尾位置的迭代器 
cbegin　   返回指向容器起始位置的常迭代器（const_iterator） 
cend 　　 返回指向容器末尾位置的常迭代器 
=================Capacity================ 
size  　　 返回有效元素个数 
max_size  返回 unordered_map 支持的最大元素个数 
empty        判断是否为空 
=================元素访问================= 
operator[]  　　   访问元素 
at  　　 　　　　访问元素 
=================元素修改================= 
insert  　　插入元素 
erase　　 删除元素 
swap 　　 交换内容 
clear　　   清空内容 
emplace 　构造及插入一个元素 
emplace_hint 按提示构造及插入一个元素 
================操作========================= 
find 　　　　　　通过给定主键查找元素,没找到：返回unordered_map::end
count 　　　　　返回匹配给定主键的元素的个数 
equal_range 　　返回值匹配给定搜索值的元素组成的范围 
================Buckets====================== 
bucket_count 　　　返回槽（Bucket）数 
max_bucket_count    返回最大槽数 
bucket_size 　　　   返回槽大小 
bucket 　　　　　　返回元素所在槽的序号 
load_factor　　　　 返回载入因子，即一个元素槽（Bucket）的最大元素数 
max_load_factor 　  返回或设置最大载入因子 
rehash　　　　　　 设置槽数 
reserve 　　　　　  请求改变容器容量



#include<unordered_map>
#include<string>
void display(unordered_map<string, int>my, string str)
{
	cout << str << endl;
	for (auto& x : my)
	{
		cout << x.first << ": " << x.second << endl;
	}
	cout << endl;
}

int main()
{
	//unordered_map::insert(尾部插入)
	unordered_map<string, int>my1,my = { {"nihao",1} };//①
	cout << "有效元素个数 " << my.size() << " 是否为空 " << my.empty() << " 支持的最大元素个数 " << my.max_size() << endl;
	
	pair<string, int>ins("wangbao", 1);
	my.insert(ins);//复制插入

	my.insert(make_pair<string, int>("haoba", 1));//移动插入
	my1.insert(my.begin(), my.end());//范围插入

	my.insert({ {"world",1},{"china",1} });//初始化数组插入
	my["nihao"] = 8;//数组形式插入和修改
	cout << "有效元素个数 " << my.size() << " 是否为空 " << my.empty() << " 支持的最大元素个数 " << my.max_size() << endl;
	display(my, "my contains: ");
	display(my1, "my contains: ");
	/*
	有效元素个数 1 是否为空 0 支持的最大元素个数 107374182
有效元素个数 5 是否为空 0 支持的最大元素个数 107374182
my contains:
nihao: 8
wangbao: 1
haoba: 1
world: 1
china: 1

my contains:
wangbao: 1
nihao: 1
haoba: 1

请按任意键继续. . .
*/
	//unordered_map查找//find函数的使用key找
	unordered_map<string, int>::const_iterator it = my.find("nihao");
	if (it == my.end())
		cout << "Not find !!" << endl;
	else
		cout << "Found " << it->first << " is " << it->second << endl;

	my.at("nihao") = 10;
	my["wangbao"] = 99;
	//display(my, "-------------");

	//unordered_map删除
	my.erase(my.begin());//通过位置删除，迭代器,以及范围删除
	my.erase("wangbao");//通过key删除
	
	//unordered_map交换
	my.swap(my1);//覆盖my = my1；
	display(my, "-------------");
	
	
	unordered_map<string, string>mymap = {
		{"house","maision"},
		
	{ "apple","pomme1" },
		{ "tree","arbre" },
	    {"book","livre"},
	    {"door","porte"},
        {"grapefruit","pamplemousse"}
	};
	mymap.insert(make_pair<string, string>("tree", "amg"));
	//unordered_map的遍历
	cout << "mymap contains: " << endl;
	for (auto it = mymap.begin(); it != mymap.end(); ++it)
	{
		cout << " " << it->first << ":" << it->second;
	}
	cout << endl;

	//bucket操作
	unsigned n = mymap.bucket_count();//返回曹数
	cout <<"mymap has :"<< n <<"buckets: "<< endl;
	//cout << mymap.bucket_size() << endl;
	for (unsigned i = 0; i < n; ++i)
	{
		cout << "bucket #" << i << "s size:" << mymap.bucket_size(i) << "contains: ";
		for (auto it = mymap.begin(i); it != mymap.end(i); ++it)
			cout << "[" << it->first << ": " << it->second << "]";
		cout << endl;
	}

	cout << "\nkey:'apple' is in bucket #" << mymap.bucket("apple") << endl;
	cout << "\nkey:'book' is in bucket #" << mymap.bucket("b") << endl;
	return 0;
	
}
